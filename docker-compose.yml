services:
  api-users:
    image: ms-auth:latest
    build:
      context: ./api-users
      dockerfile: Dockerfile
    ports:
      - "${API_PORT}:${API_PORT}"
    environment:
      - PORT=${API_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
    depends_on:
      - auth-db
    networks:
      - user-network-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT}/health"]
      interval: 30s
      retries: 5
      start_period: 40s
      timeout: 20s

  auth-db:
    image: postgres:14.3-alpine
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - auth-db-devops-data:/var/lib/postgresql/data
    networks:
      - user-network-app
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 30s
      retries: 5
      start_period: 40s
      timeout: 20s

  client-user-interface:
    image: client-user-interface:latest
    build:
      context: ./client-user-interface
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    depends_on:
      - api-users
    networks:
      - user-network-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${FRONTEND_PORT}/"]
      interval: 30s
      retries: 5
      start_period: 40s
      timeout: 20s

networks:
  user-network-app:
    driver: bridge

volumes:
  auth-db-devops-data:
